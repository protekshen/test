{"version":3,"file":"iconfont.js","sourceRoot":"","sources":["iconfont.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as gulp from 'gulp';\nimport * as consolidate from 'gulp-consolidate';\nimport * as debug from 'gulp-debug';\nimport * as iconfont from 'gulp-iconfont';\nimport * as rename from 'gulp-rename';\nimport { Gulpclass, SequenceTask, Task } from 'gulpclass';\nimport 'reflect-metadata';\n\nconst ICONFONT_INFO = 'A config file(iconfont.json) and template for the iconfont creating'\n  + 'has been created in the root directory. Set your preferences for the library.';\nconst CONFIG_NAME = 'iconfont.json';\nconst TEMPLATE_NAME = 'template.scss';\n\nclass Config {\n  iconsDir: string = '';\n  stylesDir: string = '';\n  fontsDir: string = '';\n  templateDir: string = '';\n  fontName: string = '';\n}\n\n@Gulpclass()\nexport class Gulpfile {\n\n  private check() {\n    console.log(fs.existsSync('iconfont/' + CONFIG_NAME));\n    return fs.existsSync('iconfont/' + CONFIG_NAME) && fs.existsSync('iconfont/' + TEMPLATE_NAME);\n  }\n\n  private read(): Config {\n    return JSON.parse(fs.readFileSync('iconfont/' + CONFIG_NAME, 'utf-8'));\n  }\n\n  private async create() {\n    if (!fs.existsSync('iconfont')) {\n      fs.mkdirSync('iconfont');\n    }\n    fs.writeFileSync('iconfont/' + CONFIG_NAME, JSON.stringify(new Config(), null, 4));\n    fs.copyFileSync('node_modules/junte-ui/' + TEMPLATE_NAME, 'iconfont/' + TEMPLATE_NAME);\n    console.log('\\x1b[31m', ICONFONT_INFO);\n  }\n\n  @Task()\n  styles() {\n    const config: Config = this.read();\n\n    console.log(config);\n    return gulp.src([config.iconsDir])\n      .pipe(debug())\n      .pipe(iconfont({\n        fontName: config.fontName,\n        prependUnicode: true,\n        formats: ['ttf', 'woff', 'svg', 'eot', 'woff2'],\n        timestamp: Math.round(Date.now() / 1000),\n        normalize: true,\n        fontHeight: 1001\n      }))\n      .on('glyphs', function (glyphs) {\n        glyphs.forEach(function (glyph, idx, arr) {\n          arr[idx].unicode[0] = glyph.unicode[0].charCodeAt(0).toString(16);\n        });\n        gulp.src(config.templateDir)\n          .pipe(consolidate('lodash', {\n            glyphs: glyphs,\n            fontName: config.fontName,\n            fontPath: '../fonts/icons/',\n            className: 'icon'\n          }))\n          .pipe(rename('icons.scss'))\n          .pipe(gulp.dest(config.stylesDir));\n      })\n      .pipe(gulp.dest(config.fontsDir));\n  }\n\n  @Task()\n  createConfig() {\n    return this.create();\n  }\n\n\n  @SequenceTask()\n  build() {\n    return this.check() ? ['styles'] : ['createConfig'];\n  }\n}\n"]}