@import "../../../styles/variables";
@import "../../../styles/components/form/common.encapsulated";

$input-bg: $white-color !default;

$input-padding-y: $gutter-normal !default;
$input-line-height: normal !default;

$input-disabled-bg: $gray-100 !default;

$input-color: $text-color !default;
$input-border-width: 1px !default;
$input-box-shadow: none !default;


$input-corner: $corner-small !default;
$input-corner-lg: $corner-small !default;
$input-corner-sm: $corner-small !default;

$input-font-size: $font-size-base !default;

$input-icon-spacing: $gutter-small !default;
$input-icon-color: $gray-800 !default;

$input-sizes: (
  #{$size-small}: (
    font-size: 11px,
    min-height: 30px
  ),
  #{$size-normal}: (
    font-size: 14px,
    min-height: 38px
  ),
  #{$size-large}: (
    font-size: 16px,
    min-height: 50px
  )
)!default;

$states: (
  #{$state-normal}: (
    border-color: $gray-600,
    bg-focus: $input-bg,
    shadow-focus: $shadow-primary-dark,
    border-color-hover: $primary-color,
    border-color-focus: $primary-color,
  ),
  #{$state-success}: (
    border-color: $success-color,
  ),
  #{$state-failed}: (
    border-color: $fail-color,
  )
) !default;

@mixin state($state) {
  input[child-of=#{$jnt-input-host}] {
    border-color: #{map-get($state, border-color)};
    &:focus {
      box-shadow: #{map-get($state, shadow-focus)};
      border-color: #{map-get($state, border-color-focus)};
    }
    &:hover {
      border-color: #{map-get($state, border-color-hover)};
    }
  }
}

@mixin size($size) {
  input[child-of=#{$jnt-input-host}] {
    font-size: #{map-get($size, font-size)};
    min-height: #{map-get($size, min-height)};
  }
}


jnt-input[host=#{$jnt-input-host}] {
  display: inline-flex;
  align-items: stretch;
  position: relative;
  width: 100%;
  @each $state, $map in $states {
    &[state='#{$state}'] {
      @include state($map);
    }
  }

  @each $size, $map in $input-sizes {
    &[size='#{$size}'] {
      @include size($map);
      [icon][child-of=#{$jnt-input-host}] {
        font-size: #{map-get($map, font-size)};
        & + input[child-of=#{$jnt-input-host}] {
          padding-left: calc(#{map-get($map, font-size)} + #{$input-padding-y} + #{$input-icon-spacing});
        }
      }
    }
  }
}

input[child-of=#{$jnt-input-host}] {
  outline: 0;
  background-color: $input-bg;
  color: $input-color;
  width: 100%;
  padding: 0 $input-padding-y;
  border-radius: $input-corner;
  border: $input-border-width solid;
  box-sizing: border-box;
  transition: all .3s;
  &:disabled {
    background-color: $input-disabled-bg;
    pointer-events: none;
  }
}

[icon][child-of=#{$jnt-input-host}] {
  position: absolute;
  top: 50%;
  left: $input-padding-y;
  transform: translateY(-50%);
  color: $input-icon-color;

}

[label][child-of=#{$jnt-input-host}] {
  background-color: $form-control-label-bg;
  padding: $form-control-label-padding-x $form-control-label-padding-y;
  display: flex;
  align-items: center;
  border-top-left-radius: $input-corner - 1px;
  border-bottom-left-radius: $input-corner - 1px;
  color: $form-control-label-color;
  margin-right: $form-control-label-spacing;
  border: $input-border-width solid $form-control-label-border-color;
  border-right: 0;
  & ~ input[child-of=#{$jnt-input-host}] {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }
}
